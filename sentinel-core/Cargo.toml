[package]
name = "sentinel-core"
version = "0.1.1"
authors = ["Forsworns <378974295@qq.com>"]
edition = "2018"
license = "Apache-2.0"
readme = "README.md"
documentation = "https://docs.rs/sentinel-core/latest"
repository = "https://github.com/sentinel-group/sentinel-rust"
homepage = "https://sentinelguard.io/en-us/"
description = """
The flow sentinel of your microservices.
"""
categories = ["concurrency", "network-programming", "development-tools"]
keywords = ["microservices", "flow-control", "sentinel", "reliability"]
exclude = ["/tests"]


# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[features]
default = []
full = ["macros"]
# If the sentinel is not utilized in asynchronous scenarios, 
# the `Sentinel` entry is not necessary to use `Arc` with `Send` trait
async = []
macros = ["sentinel-macros"]
exporter = ["prometheus_exporter"]
logger_env = ["env_logger"]
logger_log4rs = ["log4rs"]
metric_log = ["directories", "regex"]
# datasources 
# todo: maybe they should be separated into individual crates
ds_etcdv3 = ["etcd-rs", "futures"]
ds_consul = ["consul", "base64"]
ds_k8s = ["kube", "k8s-openapi", "schemars", "futures"]
# wasm proxy
proxy_envoy = ["proxy-wasm", "getrandom"]

[dependencies]
sentinel-macros = { version = "0.1.0", path = "../sentinel-macros", optional = true }
sysinfo = "0.23.0"
cfg-if = "1.0.0"
# enum
enum-map = "1.1.0"
# num_enum = "0.5.2"
time = { version = "0.3.5", features = ["formatting", "macros"] }
# serialize/deserialize
serde = { version = "1.0.137", features = ["derive"] }
serde_json = "1.0.80"
serde_yaml = "0.8.23"
lazy_static = "1.4.0"
# error
anyhow = "1.0.51"
# logging 
directories = { version = "4.0.1", optional = true }
env_logger = { version = "0.9.0", optional = true }
log4rs = { version = "1.0.0", optional = true }
log = "0.4"
regex = { version = "1.5", optional = true }
prometheus_exporter = { version = "0.8.4", optional = true }
# todo: simplify encapsulation
# using getset = "0.1.1"
lru = "0.7.5"
etcd-rs = { version = "0.6", optional = true }
consul = { version = "0.4", optional = true }
futures = { version = "0.3.17", optional = true }
base64 = { version = "0.13", optional = true }
kube = { version = "0.65", features = ["derive", "runtime"], optional = true }
k8s-openapi = { version = "0.14.0", default-features = false, features = [
  "v1_22",
], optional = true }
schemars = { version = "0.8.8", optional = true }

[target.'cfg(not(target_arch="wasm32"))'.dependencies]
# cannot add "wasm-bindgen" feature to uuid, 
# they won't be exported by `proxy_wasm` module 
uuid = { version = "0.8", features = ["serde", "v4"] }

# for envoy wasm proxy
[target.wasm32-unknown-unknown.dependencies]
proxy-wasm = { version = "0.1.4", optional = true }
getrandom = { version = "0.2", features = ["js"], optional = true  }


[dev-dependencies]
mockall = "0.11.0"
rand = "0.8.4"
tokio = { version = "1", features = ["full"] }

[lib]
doctest = false

[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]

# flow control related examples
[[example]]
name = "hello_world"
path = "../examples/rules/flow/hello_world.rs"
required-features = ["full"]

[[example]]
name = "tokio"
path = "../examples/rules/flow/tokio.rs"
required-features = ["full", "async"]

[[example]]
name = "macro"
path = "../examples/rules/flow/macro.rs"
required-features = ["full"]

[[example]]
name = "memory_adaptive"
path = "../examples/rules/flow/memory_adaptive.rs"
required-features = ["full"]

[[example]]
name = "throttling"
path = "../examples/rules/flow/throttling.rs"
required-features = ["full"]

[[example]]
name = "method"
path = "../examples/rules/flow/method.rs"
required-features = ["full"]

# system metrics related examples
[[example]]
name = "inbound_qps"
path = "../examples/rules/system/inbound_qps.rs"
required-features = ["full"]

[[example]]
name = "avg_rt"
path = "../examples/rules/system/avg_rt.rs"
required-features = ["full"]

[[example]]
name = "cpu_usage"
path = "../examples/rules/system/cpu_usage.rs"
required-features = ["full"]

[[example]]
name = "concurrency"
path = "../examples/rules/system/concurrency.rs"
required-features = ["full"]

[[example]]
name = "load"
path = "../examples/rules/system/load.rs"
required-features = ["full"]

# isolation related examples
[[example]]
name = "isolation"
path = "../examples/rules/isolation/concurrency.rs"
required-features = ["full"]

# circuit breaker related examples
[[example]]
name = "error_count"
path = "../examples/rules/circuit_breaker/error_count.rs"
required-features = ["full"]

[[example]]
name = "error_ratio"
path = "../examples/rules/circuit_breaker/error_ratio.rs"
required-features = ["full"]

[[example]]
name = "slow_request"
path = "../examples/rules/circuit_breaker/slow_request.rs"
required-features = ["full"]

# hotspot related examples
[[example]]
name = "hotspot_qps_reject"
path = "../examples/rules/hotspot/qps_reject.rs"
required-features = ["full"]

[[example]]
name = "hotspot_qps_throttling"
path = "../examples/rules/hotspot/qps_throttling.rs"
required-features = ["full"]

[[example]]
name = "hotspot_concurrency"
path = "../examples/rules/hotspot/concurrency.rs"
required-features = ["full"]

[[example]]
name = "config_yaml"
path = "../examples/config/from_yaml/from_yaml.rs"
required-features = ["full"]


[[example]]
name = "config_entity"
path = "../examples/config/from_entity/from_entity.rs"
required-features = ["full"]


[[example]]
name = "prometheus"
path = "../examples/exporter/prometheus/prometheus.rs"
required-features = ["full", "exporter"]

[[example]]
name = "etcdv3"
path = "../examples/datasources/etcdv3.rs"
required-features = ["full", "ds_etcdv3", "async"]

[[example]]
name = "consul"
path = "../examples/datasources/consul.rs"
required-features = ["full", "ds_consul", "async"]

[[example]]
name = "k8s"
path = "../examples/datasources/k8s.rs"
required-features = ["full", "ds_k8s", "async"]